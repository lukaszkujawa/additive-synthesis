{"version":3,"sources":["logo.svg","Synth.js","Animation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","window","AudioContext","webkitAudioContext","actx","sampleRate","offset","Synth","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isPlaying","oscillator","sineWaveAt","sampleNumber","tone","t","Math","floor","PI","sin","arr","i","buf","Float32Array","length","buffer","createBuffer","copyToChannel","source","createBufferSource","connect","destination","start","console","log","whiteNoise","createScriptProcessor","onaudioprocess","e","mul","output","outputBuffer","getChannelData","old","react","onClick","startSynth","bind","name","React","defaultProps","wave","unit_size","waveImage","my_curve","animation","Animation","initAnimation","tick","assertThisInitialized","wavetype","push","x","y","amp","r","angle","vel","col1","col2","xx","pow","initWave","sum","height","ctx","circle","radius","beginPath","lineWidth","strokeStyle","arc","stroke","moveTo","rad","xp","cos","yp","lineTo","fillStyle","fill","canvas","ymid","toFixed","cx","width","globalAlpha","lenght","refs","getContext","createImageData","_this$props","clearRect","save","drawGrid","cords","ci","drawCircler","slice","drawCurve","restore","requestAnimationFrame","_this2","_this$props2","className","restart","ref","App","react_default","a","createElement","src_Animation","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c1f8c2d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import * as React from 'react';\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nlet actx = new AudioContext()\nlet sampleRate = actx.sampleRate;\nlet offset = 0;\n\nclass Synth extends React.Component {\n\n  static defaultProps = {\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isPlaying: false,\n      oscillator: null\n    };\n  }\n\n\n startSynth() {\n    let sineWaveAt = (sampleNumber, tone) => {\n        let sampleFreq = sampleRate / (tone * (Math.floor(sampleNumber/sampleRate)+1))\n        let x = sampleNumber / sampleFreq\n        let t = x * Math.PI*2\n\n        return Math.sin(t) > 0 ? 1 : -1\n        return -4*Math.sin(t) + 4*Math.sin(t*2)/2 - 4*Math.sin(t*3)/3  + 4*Math.sin(t*4)/4 - 4*Math.sin(t*5)/5 // + 2*Math.sin(t2)/3 + 2*Math.sin(t3)/5// + 2*Math.sin(3*t) / 3  + 2*Math.sin(5*t) / 5//  + 2*Math.sin(7*t) / 7\n        //return Math.sin(sampleNumber / (sampleFreq / (Math.PI*2)))\n    }\n\n    let arr = [], volume = 0.2, seconds = 5, tone = 261.625565\n\n    for (var i = 0; i < sampleRate * seconds; i++) {\n      arr[i] = sineWaveAt(i, tone) * volume\n    }\n\n    let buf = new Float32Array(arr.length)\n    for (var i = 0; i < arr.length; i++) buf[i] = arr[i]\n    let buffer = actx.createBuffer(1, buf.length, actx.sampleRate)\n    buffer.copyToChannel(buf, 0)\n    let source = actx.createBufferSource();\n    source.buffer = buffer;\n    source.connect(actx.destination);\n    source.start(0);\n }\n\n xstartSynth() {\n   if(this.state.isPlaying == false) {\n      console.log(\" * Beep * \", sampleRate )\n\n      this.state.isPlaying = true\n      let bf = 4096\n\n      var whiteNoise = actx.createScriptProcessor(bf, 0, 1);\n\n      whiteNoise.onaudioprocess = function(e) {\n          let mul = 220*2*Math.PI\n          var output = e.outputBuffer.getChannelData(0);\n\n          for (var i = 0; i < output.length; i++) {\n              output[i] = Math.sin( mul * ((offset+i) / sampleRate));\n          }\n\n          offset += i;\n          if (offset > sampleRate) {\n            let old = offset\n            offset -= sampleRate;\n            console.log(old, offset)\n          }\n      }\n\n      whiteNoise.connect(actx.destination);\n    }\n    /*\n    if(this.state.oscillator == null) {\n\n      let oscillator = actx.createOscillator()\n      oscillator.type = \"sine\"\n      oscillator.connect(actx.destination)\n      oscillator.frequency.value = 440\n      this.state.oscillator = oscillator\n    }\n\n    if(this.state.isPlaying == true) {\n      this.state.isPlaying = false;\n      this.state.oscillator.stop()\n    }\n    else {\n      this.state.isPlaying = true;\n\n\n      this.state.oscillator.start()\n    }\n    */\n  }\n\n  render() {\n    return (\n      <h1 onClick={this.startSynth.bind(this)}>Play Wave {this.props.name}</h1>\n    );\n  }\n}\n\n\nexport default Synth;\n","import * as React from 'react';\n\n\nlet wave = [\n]\n\n\nlet unit_size = 0\n\nlet waveImage = null\nlet waveImageBuff = null\nlet gridImage = null\nlet waveOffsPos = 433\nlet waveOffs = waveOffsPos\n\nlet my_curve = []\nlet animation = true\n\n\nclass Animation extends React.Component {\n\n\n  constructor(props) {\n    super(props);\n\n    this.initAnimation(\"sin\")\n    this.tick = this.tick.bind(this);\n  }\n\n  initWave(wavetype) {\n    wave = []\n    if( wavetype == \"sin\") {\n      wave.push( { x: 0, y: 0,  amp: 1, r: 1, angle: 0, vel: 1, col1:  \"#FF0000\", col2:  \"#FF0000\" } )\n    }\n\n    if( wavetype == \"two\") {\n      wave.push( { x: 0, y: 0,  amp: 1, r: 1, angle: 0, vel: 5, col1:  \"#FF0000\", col2:  \"#FF0000\" } )\n      wave.push( { x: 0, y: 0,  amp: 1, r: 1, angle: 90, vel: -4, col1:  \"#FF0000\", col2:  \"#FF0000\" } )\n    }\n\n\n    else if( wavetype == \"saw\")  {\n      for(let xx = 1 ; xx < 16 ; xx++) {\n        wave.push(  { x: 0, y: 0,  amp: 1, r: 1/xx, angle: 0, vel: 3*xx*Math.pow(-1,xx), col1:  \"#FF0000\", col2:  \"#FFAAAA\" } )\n      }\n    }\n\n    else if( wavetype == \"sawr\")  {\n      for(let xx = 1 ; xx < 16 ; xx++) {\n        wave.push(  { x: 0, y: 0,  amp: 1, r: 1/xx, angle: 180, vel: 3*xx*Math.pow(-1,xx), col1:  \"#FF0000\", col2:  \"#FFAAAA\" } )\n      }\n    }\n\n    else if( wavetype == \"square\")  {\n      for(let xx = 1 ; xx < 16 ; xx++) {\n          wave.push(  { x: 0, y: 0, amp: 1, r: 1/(2*xx-1), angle: 0, vel: 2*xx-1, col1:  \"#FF0000\", col2:  \"#FFAAAA\" } )\n      }\n    }\n\n    else if( wavetype == \"triangle\")  {\n      for(let xx = 1 ; xx < 6 ; xx+=4) {\n          wave.push(  { x: 0, y: 0, r: 1 / Math.pow(xx, 2) , angle: 0, vel:  1.5 * xx, col1:  \"#FF0000\", col2:  \"#FFAAAA\" } )\n          wave.push(  { x: 0, y: 0, r: 1 / Math.pow(xx+2, 2) , angle: 0, vel: - 1.5 * (xx+2), col1:  \"#FF0000\", col2:  \"#FFAAAA\" } )\n      }\n    }\n\n    else if( wavetype == \"impulse\")  {\n      let mxx = 8\n      for(let xx = 0 ; xx < mxx ; xx++) {\n        wave.push(  { x: 0, y: 0,  amp: 1, r: (mxx-xx)/mxx, angle: 270, vel: (1+xx) * Math.pow(-1,xx), col1:  \"#FF0000\", col2:  \"#FFAAAA\" } )\n      }\n    }\n\n  }\n\n  initAnimation(wavetype) {\n    animation = false\n    this.initWave(wavetype)\n    let sum = 0\n    for( let i in wave ) {\n      sum += wave[i].r\n    }\n\n    for( let i in wave ) {\n      wave[i].r /= sum\n    }\n\n    unit_size = 1*this.props.height/2-20\n    animation = true\n  }\n\n  drawCircler(ctx, circle) {\n    let radius = circle.r * unit_size\n    ctx.beginPath();\n    ctx.lineWidth = 1\n    ctx.strokeStyle = circle.col1\n    ctx.arc(circle.x, circle.y, radius, 0, 2 * Math.PI);\n    ctx.stroke();\n\n    ctx.beginPath();\n    ctx.lineWidth = 1\n    ctx.strokeStyle = circle.col2\n    ctx.moveTo(circle.x, circle.y);\n    let y = circle.y - radius\n    let rad = circle.angle * Math.PI/180\n    let xp = circle.x+radius * Math.cos(rad)\n    let yp = circle.y+radius * Math.sin(rad)\n    ctx.lineTo(xp, yp);\n    ctx.stroke();\n\n    ctx.beginPath();\n    ctx.arc(xp, yp, 4, 0, 2 * Math.PI);\n    ctx.fillStyle = circle.col2\n    ctx.fill();\n    ctx.stroke();\n\n    return [xp, yp]\n  }\n\n  drawGrid(canvas, ctx) {\n    let ymid = (canvas.height/2).toFixed(0)*1\n    let cx = canvas.width / 4\n    ctx.globalAlpha = 0.2;\n    ctx.beginPath();\n    ctx.lineWidth = 1\n    ctx.strokeStyle = \"#333333\"\n    ctx.moveTo(20, ymid)\n    ctx.lineTo(canvas.width, ymid);\n\n    ctx.moveTo(20, ymid+1*unit_size)\n    ctx.lineTo(canvas.width, ymid+1*unit_size);\n\n    ctx.moveTo(20, ymid  - unit_size)\n    ctx.lineTo(canvas.width, ymid - unit_size);\n\n    for(let i = -1 ; i < 7 ; i++) {\n      ctx.moveTo(cx+i*unit_size, 20)\n      ctx.lineTo(cx+i*unit_size, canvas.height-20);\n    }\n\n    ctx.stroke();\n    ctx.globalAlpha = 1;\n  }\n\n  drawCurve(ctx) {\n    if(my_curve.length < 2) return\n\n    ctx.beginPath();\n    ctx.lineWidth = 1\n    ctx.strokeStyle = \"#FF0000\"\n    ctx.moveTo(my_curve.lenght, my_curve[my_curve.lenght-1])\n\n    for(let x = my_curve.length-2 ; x >= 0 ; x--){\n      ctx.lineTo(waveOffsPos + my_curve.length - x, my_curve[x]);\n    }\n\n    ctx.stroke();\n  }\n\n  tick() {\n    const canvas = this.refs.canvas\n    const ctx = canvas.getContext(\"2d\")\n    if(waveImage == null) {\n      waveImage = ctx.createImageData(canvas.width, canvas.height);\n      waveImageBuff = ctx.createImageData(canvas.width, canvas.height);\n    }\n\n    const { width, height } = this.props;\n    ctx.clearRect(0, 0, width, height);\n    ctx.save()\n\n    //ctx.putImageData(waveImage, waveOffsPos - waveOffs , 0);\n    this.drawGrid(canvas, ctx)\n\n    let cords = [canvas.width / 4, canvas.height / 2]\n\n    for(let i in wave) {\n      let ci = wave[i]\n      ci.x = cords[0]\n      ci.y = cords[1]\n      cords = this.drawCircler(ctx, ci)\n      ci.angle += ci.vel\n      if(ci.angle > 360) ci.angle -= 360\n    }\n\n    ctx.beginPath();\n    ctx.lineWidth = 1\n    ctx.strokeStyle = \"#333333\"\n    ctx.moveTo(cords[0], cords[1])\n    ctx.lineTo(waveOffsPos, cords[1]);\n    ctx.arc(waveOffsPos, cords[1], 2, 0, 2 * Math.PI);\n    ctx.stroke();\n\n    my_curve.push(cords[1].toFixed(0))\n    if(my_curve.length > 700) {\n      my_curve = my_curve.slice(-350)\n    }\n    this.drawCurve(ctx)\n\n\n    ctx.restore()\n    if(animation) requestAnimationFrame(this.tick);\n  }\n\n  componentDidMount() {\n\n    requestAnimationFrame(this.tick)\n  }\n\n  restart(wavetype) {\n    my_curve = []\n    waveOffs = waveOffsPos\n    this.initAnimation(wavetype)\n  }\n\n  render() {\n    const { width, height } = this.props;\n\n    return (\n      <div>\n        <h3>Additive Synthesis</h3>\n        <div className=\"nav\">\n          <div className=\"button\" onClick={() => this.restart(\"sin\")}>SINE</div>\n          <div className=\"button\" onClick={() => this.restart(\"two\")}>2x SINE</div>\n          <div className=\"button\" onClick={() => this.restart(\"saw\")}>SAW</div>\n          <div className=\"button\" onClick={() => this.restart(\"sawr\")}>SAW-R</div>\n          <div className=\"button\" onClick={() => this.restart(\"triangle\")}>TRIANGLE</div>\n          <div className=\"button\" onClick={() => this.restart(\"impulse\")}>IMPULSE</div>\n          <div className=\"button\" onClick={() => this.restart(\"square\")}>SQUARE</div>\n        </div>\n        <canvas ref=\"canvas\" width={width} height={height} />\n      </div>\n    );\n  }\n}\n\nexport default Animation;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Synth from './Synth';\nimport Animation from './Animation';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Animation width=\"960\" height=\"425\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}